diff -r 15185704d55c src/org/odk/collect/android/widgets/DateWidget.java
--- a/src/org/odk/collect/android/widgets/DateWidget.java	Thu Feb 02 09:57:17 2012 -0800
+++ b/src/org/odk/collect/android/widgets/DateWidget.java	Tue Jun 12 14:08:17 2012 +0530
@@ -21,9 +21,11 @@
 
 import android.content.Context;
 import android.view.Gravity;
+import android.view.View;
 import android.view.inputmethod.InputMethodManager;
 import android.widget.DatePicker;
 
+import java.lang.reflect.Field;
 import java.util.Calendar;
 import java.util.Date;
 
@@ -38,6 +40,8 @@
 
     private DatePicker mDatePicker;
     private DatePicker.OnDateChangedListener mDateListener;
+    private boolean hideDay = false;
+    private boolean hideMonth = false;
 
 
     public DateWidget(Context context, FormEntryPrompt prompt) {
@@ -46,7 +50,9 @@
         mDatePicker = new DatePicker(getContext());
         mDatePicker.setFocusable(!prompt.isReadOnly());
         mDatePicker.setEnabled(!prompt.isReadOnly());
-
+        
+        hideDayFieldIfNotInFormat(prompt);
+        
         mDateListener = new DatePicker.OnDateChangedListener() {
             @Override
             public void onDateChanged(DatePicker view, int year, int month, int day) {
@@ -75,6 +81,45 @@
         addView(mDatePicker);
     }
 
+    private void hideDayFieldIfNotInFormat(FormEntryPrompt prompt) {
+        String appearance = prompt.getQuestion().getAppearanceAttr();
+        if ( appearance == null ) return;
+        
+        if ( "month-year".equals(appearance) ) {
+        	hideDay = true;
+        } else if ( "year".equals(appearance) ) {
+        	hideMonth = true;
+        }
+
+        if ( hideMonth || hideDay ) {
+		    for (Field datePickerDialogField : this.mDatePicker.getClass().getDeclaredFields()) {
+		        if ("mDayPicker".equals(datePickerDialogField.getName()) ||
+		                "mDaySpinner".equals(datePickerDialogField.getName())) {
+		            datePickerDialogField.setAccessible(true);
+		            Object dayPicker = new Object();
+		            try {
+		                dayPicker = datePickerDialogField.get(this.mDatePicker);
+		            } catch (Exception e) {
+		                e.printStackTrace();
+		            }
+		            ((View) dayPicker).setVisibility(View.GONE);
+		        }
+		        if ( hideMonth ) {
+			        if ("mMonthPicker".equals(datePickerDialogField.getName()) ||
+			                "mMonthSpinner".equals(datePickerDialogField.getName())) {
+			            datePickerDialogField.setAccessible(true);
+			            Object monthPicker = new Object();
+			            try {
+			            	monthPicker = datePickerDialogField.get(this.mDatePicker);
+			            } catch (Exception e) {
+			                e.printStackTrace();
+			            }
+			            ((View) monthPicker).setVisibility(View.GONE);
+			        }
+		        }
+		    }
+        }
+    }
 
     private void setAnswer() {
 
@@ -103,9 +148,9 @@
 
     @Override
     public IAnswerData getAnswer() {
-        DateTime ldt =
-            new DateTime(mDatePicker.getYear(), mDatePicker.getMonth() + 1,
-                    mDatePicker.getDayOfMonth(), 0, 0);
+        DateTime ldt = new DateTime(mDatePicker.getYear(), hideMonth ? 1 : mDatePicker.getMonth() + 1,
+                    (hideMonth || hideDay) ? 1 : mDatePicker.getDayOfMonth(), 0, 0);
+
        // DateTime utc = ldt.withZone(DateTimeZone.forID("UTC"));
         return new DateData(ldt.toDate());
     }
